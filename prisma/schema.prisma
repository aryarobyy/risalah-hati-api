// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id String @id @default(uuid())
  email String @unique
  username String @unique
  password String
  profilePic String? @default("")
  name String
  role Role @default(USER)
  createdAt DateTime @default(now())
  messages RoomMessage[]

  room Room[]
  groups UserRoom[]
  blog Blog[]

  @@map("user")
}

model Room {
  id String @id @default(uuid())
  title String
  description String? @default("")
  image String
  authorId String
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id])
  messages RoomMessage[]

  users UserRoom[]
}

// Penghubung buat user sama room
model UserRoom {
  userId  String
  roomId String
  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@id([userId, roomId])
  @@map("user_room")
}

model RoomMessage {
  id Int @id @default(autoincrement())
  senderId String
  roomId String
  content String
  createdAt DateTime @default(now())

  sender User @relation(fields: [senderId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@map("room_message")
}

enum BlogType {
  ARTICLE
  NEWS
  EVENT
}

model Blog {
  id Int @id @default(autoincrement())
  authorId String
  title String
  content String? @default("")
  image String
  createdAt DateTime @default(now())
  type BlogType

  author User @relation(fields: [authorId], references: [id])

  @@map("blog")
}